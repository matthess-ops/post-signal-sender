{"version":3,"sources":["src/classes/LocalStorageData.ts","src/classes/PostThreads.ts","src/classes/Views.ts","src/classes/Helpers.ts","src/classes/Validation.ts","src/classes/ButtonEvents.ts","src/classes/MainEvents.ts","src/index.ts","../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["   /*\r\n  LocalStorageData class\r\n  EXPLANATION: This class is responsible for checking,reading and writing ipAdress and tableText to localStorage.\r\n  REMARKS:  none\r\n    */\r\nexport class LocalStorageData{\r\n       /*\r\n  hasLocalData()\r\n  EXPLANATION: Checks if localStorage has data. \r\n  REMARKS:  none\r\n    */\r\n    public hasLocalData():boolean{\r\n        if(localStorage.getItem(\"tableText\") != undefined){\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n       /*\r\n  readLocalData()\r\n  EXPLANATION: read tableText and ipAdress from localstorage\r\n  REMARKS:  none\r\n    */\r\n    public readLocalData():Array<string>{\r\n        return [localStorage.getItem(\"tableText\"),localStorage.getItem(\"ipAdress\")]\r\n      \r\n    }\r\n\r\n    public writeLocalData(tableText:string,ipAdress:string){\r\n        localStorage.setItem(\"ipAdress\",ipAdress)\r\n        localStorage.setItem(\"tableText\",tableText)\r\n\r\n    }\r\n\r\n\r\n}","/*\r\n  class postThreads\r\n  EXPLANATION: This class creates/stores/interacts with the workerThreads. Each workerThread\r\n  is a single post request, where each post request corresponds to a tableRow from the uploaded\r\n  tableText \r\n  REMARKS:\r\n    */\r\n\r\n\r\n\r\nexport class PostThreads {\r\n  // array that stores all the current worker threads\r\n  private workerThreads = [];\r\n\r\n  // the radiobuttons input consists out of several timeintervals identifiers. This dictionary is used\r\n  // to convert these timeinterval identifiers to their corresponding seconds.\r\n  private secondsTowait = {\r\n    zero: 15,\r\n    one: 30,\r\n    two: 60,\r\n    three: 120,\r\n  };\r\n  private ipAdress;\r\n\r\n  /*\r\n  stop()\r\n  EXPLANATION: methods that terminates all the worker threads\r\n  REMARKS: none\r\n    */\r\n  public stop(): void {\r\n    if (this.workerThreads != undefined) {\r\n      this.workerThreads.forEach((workerThread) => {\r\n        workerThread.terminate();\r\n      });\r\n    }\r\n  }\r\n\r\n    /*\r\n  sendOnce()\r\n  EXPLANATION: This method immediately sends one tableRowDict..\r\n  REMARKS: In ButtonEvents.ts this method is called always with the first tableRowDict out of the tableDict array\r\n  ,thus in principle you could set tableDict as a class variable directly. And only send the first tableRowDict (tableDict[0])\r\n  in this method.\r\n    */\r\n\r\n  public sendOnce(tableRowDict:{}):void {\r\n    fetch(this.ipAdress, {\r\n      method: \"POST\",\r\n      mode: \"no-cors\", // \"no-cors is needed if you send data to another server\"\r\n      body: JSON.stringify(tableRowDict), // can only send string thus the table\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((res) => {\r\n      console.log(\"Request complete! response:\", res);\r\n    });\r\n  }\r\n\r\n\r\n  setIpAdress(ipAdressIn:string) {\r\n    this.ipAdress = ipAdressIn;\r\n  }\r\n\r\n  /*\r\n  start()\r\n  EXPLANATION: For each tableRowDict in tableDict the corresponding radioButton group data is found by matching the ids.\r\n  Then the radiobutton group selection , which can be a string of 0,1,2,3 is converted to their corresponding seconds  value\r\n  with the help of the secondsTowait dictionary. The seconds value is then added as the \"timeInterval\" key to the tableRowDict.\r\n  After this a workerThread is created, started and saved (this.workerThreads) for each tableRowDict in tableDict.\r\n  REMARKS:\r\n    */\r\n  public  start(radioButtonsData:Array<string>, tableDict:Array<{}>):void {\r\n    let workerThreadData = [];\r\n\r\n    tableDict.forEach((tableRowDict) => {\r\n      radioButtonsData.forEach((radioButtonData) => {\r\n        const id = radioButtonData.split(\"_\")[1];\r\n        const selection = radioButtonData.split(\"_\")[3];\r\n\r\n        if (id == tableRowDict[\"Id\"]) {\r\n          let updatedTableDict = tableRowDict;\r\n          if (selection == \"0\") {\r\n            updatedTableDict[\"timeInterval\"] = this.secondsTowait.zero;\r\n          } else if (selection == \"1\") {\r\n            updatedTableDict[\"timeInterval\"] = this.secondsTowait.one;\r\n          } else if (selection == \"2\") {\r\n            updatedTableDict[\"timeInterval\"] = this.secondsTowait.two;\r\n          } else if (selection == \"3\") {\r\n            updatedTableDict[\"timeInterval\"] = this.secondsTowait.three;\r\n          }\r\n          workerThreadData.push(updatedTableDict);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.stop();\r\n    workerThreadData.forEach((element) => {\r\n      let worker = new Worker(\"./Worker.ts\");\r\n      worker.postMessage([element, this.ipAdress]);\r\n      this.workerThreads.push(worker);\r\n    });\r\n  }\r\n}\r\n","\r\n            /*\r\n  views class\r\n  EXPLANATION: creates the views for errorDiv,buttonDiv,statusDiv, tableDiv\r\n  REMARKS: none\r\n    */\r\n\r\n\r\n\r\nexport class Views{\r\n\r\n    // set public for \r\n    private errorDiv = <HTMLInputElement>document.getElementById(\"errorDiv\")\r\n    private tableDiv = <HTMLInputElement>document.getElementById(\"tableDiv\")\r\n    private statusDiv = <HTMLInputElement>document.getElementById(\"statusDiv\")\r\n    private buttonsDiv = <HTMLInputElement>document.getElementById(\"buttonsDiv\")\r\n            /*\r\n  clearNonStaticViews()\r\n  EXPLANATION: clear the errorDiv,buttonDiv,statusDiv, tableDiv\r\n  REMARKS: none\r\n    */\r\n\r\n    public clearNonStaticViews():void{\r\n        this.errorDiv.textContent = \"\"\r\n        this.tableDiv.textContent =\"\"\r\n        this.statusDiv.textContent=\"\"\r\n        this.buttonsDiv.textContent=\"\"\r\n    }\r\n\r\n            /*\r\n  tableView()\r\n  EXPLANATION: creates all the elements needed for the html table. The html table exists out\r\n  of rows, where each row is a dict from the tableDict array. Also each row has a radio button group\r\n  containing 4 radioButtons. Each button in a radiogroup has a value as followed \"radiogroup_1_button_2\",\r\n  the 1, corresponds to the Id of the dict in tableDict. The 2 corresponds to the second button in the radioGroup\r\n  of this row. \r\n  REMARKS: none\r\n    */\r\n    public tableView(tableDict:Array<{}>):void{\r\n        this.tableDiv.textContent =\"\" // clear tableDiv\r\n        let tableNode = document.createElement(\"table\"); // table parent element\r\n        tableNode.className = \"table\";\r\n        // start header colums\r\n        let theadNode = document.createElement(\"thead\");\r\n        let theadTrNode = document.createElement(\"tr\");\r\n        const dictKeys = Object.keys(tableDict[0]);\r\n        dictKeys.forEach((dictkey) => {\r\n          let theadTrThNode = document.createElement(\"th\");\r\n          theadTrThNode.innerText = dictkey;\r\n          theadTrThNode.scope = \"col\";\r\n          theadTrNode.appendChild(theadTrThNode);\r\n        });\r\n        theadNode.appendChild(theadTrNode);\r\n        tableNode.appendChild(theadNode);\r\n        // end header colums\r\n    \r\n        // begin tbody\r\n        let tbodyNode = document.createElement(\"tbody\");\r\n    \r\n        tableDict.forEach((rowElement) => {\r\n          let trNode = document.createElement(\"tr\");\r\n    \r\n          dictKeys.forEach((dictKey) => {\r\n            let tdNode = document.createElement(\"td\");\r\n            tdNode.innerText = rowElement[dictKey];\r\n            trNode.appendChild(tdNode);\r\n          });\r\n          // create the 4 radiobuttons\r\n          let radioGroupNode = document.createElement(\"td\");\r\n          radioGroupNode.className = \"form-check form-check-inline\";\r\n          for (let radioGroupIndex = 0; radioGroupIndex < 4; radioGroupIndex++) {\r\n            let radioButtonNode = document.createElement(\"input\");\r\n            radioButtonNode.className = \"m-1\";\r\n            radioButtonNode.type = \"radio\";\r\n            radioButtonNode.name = \"radioGroup_\" + rowElement[\"Id\"];\r\n            radioButtonNode.id =\r\n              \"radioGroup_\" + rowElement[\"Id\"] + \"_button_\" + radioGroupIndex.toString(); //id correspond to tabledic dict Id, radioGroupIndex (0,1,2,3) coresponds to which radio button it is in the radio group\r\n            radioButtonNode.value =\r\n              \"radioGroup_\" + rowElement[\"Id\"] + \"_button_\" + radioGroupIndex.toString();\r\n            if (radioGroupIndex == 0) {\r\n              radioButtonNode.checked = true; // set the first radiobutton in radiogroup as default\r\n            }\r\n            radioGroupNode.appendChild(radioButtonNode);\r\n          }\r\n          // end create the 4 radiobuttons\r\n    \r\n          trNode.append(radioGroupNode);\r\n    \r\n          tbodyNode.appendChild(trNode);\r\n        });\r\n        tableNode.appendChild(tbodyNode);\r\n   \r\n        this.tableDiv.appendChild(tableNode)\r\n    }\r\n\r\n                /*\r\n  tableView()\r\n  EXPLANATION: Creates the view for errorsDiv. Multiple erros can be shown at once.\r\n  REMARKS: none\r\n    */\r\n\r\n    public errorsView(errorMessages:Array<string>):void{\r\n        this.errorDiv.textContent =\"\"\r\n        let errorsDiv = document.createElement(\"div\");\r\n\r\n        errorMessages.forEach(errorMessage => { // create for each error message a new bootstrap div\r\n            let errorDiv = document.createElement(\"div\");\r\n            errorDiv.className = \"p-3 bg-warning\"\r\n            errorDiv.innerText = errorMessage\r\n            errorsDiv.appendChild(errorDiv)\r\n        });\r\n\r\n        this.errorDiv.appendChild(errorsDiv)\r\n    }\r\n                /*\r\n  createButton()\r\n  EXPLANATION: Method used by buttonsView() to create the start,stop,sendOnce and update button. I used\r\n  a seperate method to prevent code duplication\r\n  REMARKS: none\r\n    */\r\n    private createButton(className: string, innerText: string, id: string) {\r\n        let button = document.createElement(\"button\");\r\n        button.className = className;\r\n        button.innerText = innerText;\r\n        button.id = id;\r\n        return button;\r\n      }\r\n\r\n                /*\r\n  buttonsView()()\r\n  EXPLANATION: Creates the stop,start,update and sendOnce button\r\n  REMARKS: Make \"btn btn-primary mr-1\" a constant, to prevent code duplication\r\n    */\r\n    public buttonsView(){\r\n        this.buttonsDiv.textContent =\"\"\r\n        let updateButton = this.createButton(\r\n          \"btn btn-primary mr-1\",\r\n          \"update\",\r\n          \"updateButton\"\r\n        );\r\n        let startButton = this.createButton(\r\n          \"btn btn-primary mr-1\",\r\n          \"start\",\r\n          \"startButton\"\r\n        );\r\n        let stopButton = this.createButton(\r\n          \"btn btn-primary mr-1\",\r\n          \"stop\",\r\n          \"stopButton\"\r\n        );\r\n        let sendOnceButton = this.createButton(\r\n          \"btn btn-primary mr-1\",\r\n          \"sendOnce\",\r\n          \"sendOnceButton\"\r\n        );\r\n    \r\n        const buttons = document.createElement(\"div\");\r\n        buttons.appendChild(startButton);\r\n        buttons.appendChild(updateButton);\r\n        buttons.appendChild(stopButton);\r\n        buttons.appendChild(sendOnceButton);\r\n        this.buttonsDiv.appendChild(buttons)\r\n\r\n    }\r\n\r\n                /*\r\n  statusView()()\r\n  EXPLANATION: Creates the view for statusDiv\r\n  REMARKS: Only two different messages are ever used,  \"threads stopped\" and \"threads started\",\r\n  next hard code these messages in this function. To prevent spelling mistakes each this methods is\r\n  used.\r\n    */\r\n    public statusView(message:string):void{\r\n        this.statusDiv.textContent = \"\"\r\n        let status = document.createElement(\"div\");\r\n        status.innerText = message;\r\n        this.statusDiv.appendChild(status)\r\n    }\r\n\r\n\r\n}"," /*\r\n  Helpers class \r\n  EXPLANATION: This class contains methods that are used for converting the tableText to a table text two-dimensional\r\n  array (first array contains the table row, the second the table row value.). And to convert the table two-dimensional\r\n  array to an table dict array (were each table row is a dict). Also it contains a method that is needed to read the radioButton groups input states. Each group can have\r\n  one of 4 states.\r\n  REMARKS: General remark maybe reshuffle all app methods in other classes. Maybe go for a more app component layout.\r\n  For example, put every method  that is needed for the inputDiv to work in one class. \r\n    */\r\n\r\n\r\n\r\nexport class Helpers {\r\n\r\n /*\r\n  tableTextToArray\r\n  EXPLANATION: converts the tableText to an two-dimensional array\r\n  REMARKS:  none\r\n    */\r\n\r\n  \r\n  public tableTextToArray(tableText:string) {\r\n    let tableArray = [];\r\n    let tableRows = tableText.replace(/\\n$/, \"\").split(\"\\n\"); // split rows, slice is done to remove last newline because else this will result in an empty array\r\n    tableRows.forEach((tableRow) => {\r\n      let tableRowCellValues = tableRow.split(\";\"); // split colums\r\n      tableArray.push(tableRowCellValues);\r\n    });\r\n    return tableArray;\r\n  }\r\n\r\n   /*\r\n  tableTextToDict\r\n  EXPLANATION: converts the tableText to an array of dictionaries. Where\r\n  each dictionary in the array is a tableRow.\r\n  REMARKS:  none\r\n    */\r\n\r\n  public tableTextToDict(tableText:string):Array<{}> {\r\n    let tableArray = this.tableTextToArray(tableText);\r\n    const headers = tableArray[0]; // these are the headers, these headers most contain an \"Id\" header.\r\n    const tableRows = tableArray.slice(1); // remove the first row, because there are the headers\r\n    let tableDict = [];\r\n    for (let i = 0; i < tableRows.length; i++) {\r\n      // loop throught row\r\n\r\n      const tableRow = tableRows[i];\r\n\r\n     \r\n        let tableRowDict = {};\r\n        for (let j = 0; j < tableRow.length; j++) {\r\n          // loop through row elements\r\n          const tableRowCellValue = tableRow[j];\r\n          tableRowDict[headers[j]] = tableRowCellValue; // row element is added as value, header is the key\r\n        }\r\n        tableDict.push(tableRowDict);\r\n    }\r\n    return tableDict;\r\n  }\r\n   /*\r\n  readRadioButtonStatus\r\n  EXPLANATION: This methods loops throught all the radioButtons and saves the checked radioButtons. \r\n  Since each radio button value is labeled with an table row Id and which of the 4 radioButtons it is\r\n  from the corresponding radiobutton group. Only the checked radioButtons have to be search to get the timeinterval\r\n  value (1,2,3,4) for each table row/radiobutton group.\r\n  REMARKS:  none\r\n    */\r\n\r\n  public readRadioButtonStatus(): Array<string> {\r\n    const radioButtons = document.querySelectorAll(\"input\");\r\n    const checkedRadioButtons = [];\r\n\r\n    if (radioButtons != undefined) { // there shouldnt be undefined radioButtons, because each button has a default on creationg\r\n      radioButtons.forEach((radioButton) => {\r\n        if (radioButton.type == \"radio\" && radioButton.checked == true) {\r\n          checkedRadioButtons.push(radioButton.value);\r\n        }\r\n      });\r\n    }\r\n    return checkedRadioButtons;\r\n  }\r\n}\r\n","\r\nimport {Helpers} from \"./Helpers\"\r\n\r\n\r\n         /*\r\n  Validation Class\r\n  EXPLANATION: This class validates the fileupload text and ipAdress input. If a validation failes\r\n  it saves an appropiate errorMessage.\r\n  REMARKS:  Maybe split ipAdress and tableText validation in seperate classes\r\n    */\r\n\r\n\r\nexport class Validation{\r\n    // all available errorMessages. For testing purposes put this method on public\r\n    public errorMessages: { [id: string] : string; } = {\r\n        textIsEmpty: \"The uploaded file does not contain any text\",\r\n        delimeterIsNotFound: \"The ; delimiter is not found in the uploaded text\",\r\n        onlyOneRow: \"The uploaded file only contains one row, should be least two a header row and one or multiple data rows\",\r\n        noIdHeader: \"The uploaded file does not contain an Id header in the header row, the header row should be the first row\",\r\n        noIpAdress: \"Enter ip adress\",\r\n        ipAdressIsInWrongFormat: \"The entered ipAdress is not valid.\" \r\n      }\r\n\r\n    private textErrors:Array<string> = []\r\n    private ipErrors:Array<string> =[]\r\n    private tableText:string;\r\n    private ipAdress:string;\r\n         /*\r\n  hasIpAdress()\r\n  EXPLANATION: Validates if an ipAdress is entered\r\n  REMARKS:  none\r\n    */\r\n    private hasIpAdress():boolean{\r\n        if(this.ipAdress == \"\" || this.ipAdress == undefined){\r\n            this.ipErrors.push(this.errorMessages.noIpAdress)\r\n\r\n            return false\r\n        }else{\r\n            return true\r\n        }\r\n    }\r\n         /*\r\n  isIpAdressCorrect()\r\n  EXPLANATION: checks if the ipAdress is in the correct format\r\n  REMARKS:  none\r\n    */\r\n    private isIpAdressCorrect():boolean{\r\n\r\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|'+ // domain name\r\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n      '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n      const resultCheck = pattern.test(this.ipAdress);\r\n      if ( resultCheck == true){\r\n          return true\r\n      }else{\r\n        this.ipErrors.push(this.errorMessages.ipAdressIsInWrongFormat)\r\n\r\n          return false\r\n      }\r\n\r\n    }\r\n         /*\r\n  validateIpAdress()\r\n  EXPLANATION: validates the ipAdress for hasipAdress() and isIpAdressCorrect()\r\n  REMARKS:  none\r\n    */\r\n    public validateIpAdress(ipAdress):boolean{\r\n        this.ipErrors = []\r\n        this.ipAdress = ipAdress\r\n        if(this.hasIpAdress() ==true){\r\n            if(this.isIpAdressCorrect() == true){\r\n                return true\r\n            }else{\r\n                return false\r\n            }\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n         /*\r\n  validationErrors()\r\n  EXPLANATION: concatenates and returns the tableText and ipAdress validation ErrorMessages\r\n  REMARKS:  none\r\n    */\r\n    get validationErrors():Array<string>{\r\n      \r\n        return this.ipErrors.concat(this.textErrors)\r\n    }\r\n\r\n             /*\r\n  fileNotEmpty()\r\n  EXPLANATION: checks if the uploaded text file contains any text\r\n  REMARKS:  none\r\n    */\r\n    private fileNotEmpty():boolean{\r\n        if(this.tableText ==\"\"){\r\n            this.textErrors.push(this.errorMessages.textIsEmpty)\r\n\r\n            return false\r\n        }else{\r\n            return true\r\n        }\r\n    }\r\n             /*\r\n  hasDelimiter()\r\n  EXPLANATION: checks if the uploaded text has the \";\" delimeter\r\n  REMARKS: Problem with this function is if a row cell contain a value that has \";\" delimiter\r\n    */\r\n    private hasDelimiter():boolean{\r\n        const tableRows = this.tableText.split(\";\")\r\n        \r\n        if(tableRows.length >1){\r\n            return true\r\n        }else{\r\n            this.textErrors.push(this.errorMessages.delimeterIsNotFound)\r\n\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n\r\n             /*\r\n  hasMoreThanOneRow()\r\n  EXPLANATION: checks if the uploaded table consist out of more than one row, a valid table\r\n  should contain a header row and at least one data row.\r\n  REMARKS: none\r\n    */\r\n    private hasMoreThanOneRow():boolean{\r\n        let tableArray = new Helpers().tableTextToArray(this.tableText)\r\n        if(tableArray.length > 1){\r\n            return true\r\n        }else{\r\n            this.textErrors.push(this.errorMessages.onlyOneRow)\r\n\r\n            return false\r\n        }\r\n    }\r\n\r\n            /*\r\n  hasIdHeader()\r\n  EXPLANATION: checks if the first row of the table array contains a cell value with a string of \"Id\"\r\n  REMARKS: none\r\n    */\r\n    private hasIdHeader():boolean{\r\n        let tableArray = new Helpers().tableTextToArray(this.tableText.slice(0,-1))\r\n        let headerFound = false\r\n        const headers = tableArray[0]\r\n        headers.forEach(header => {\r\n            if(header == \"Id\"){\r\n                headerFound = true\r\n            }\r\n        });\r\n\r\n        if(headerFound == false){\r\n            this.textErrors.push(this.errorMessages.noIdHeader)\r\n\r\n        }\r\n\r\n        return headerFound\r\n    }\r\n            /*\r\n  validateText()\r\n  EXPLANATION: Validates the uploaded textfile (tableText) for all text associated checks. \r\n  REMARKS: none\r\n    */\r\n    public validateText(tableText:string):boolean{\r\n        this.tableText =  tableText\r\n        this.textErrors = []\r\n        if(this.fileNotEmpty() == true){\r\n            if(this.hasDelimiter() == true){\r\n                // const tableTextToArray =  new Helpers().tableTextToArray(this.tableText)\r\n                if(this.hasMoreThanOneRow() == true){\r\n                    if(this.hasIdHeader() == true){\r\n                        return true\r\n                    }else{\r\n                        return false\r\n                    }\r\n\r\n                }else{\r\n                    return false\r\n                }\r\n            }else{\r\n                return false\r\n            }\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n}","import { Helpers } from \"./Helpers\";\r\nimport { PostThreads } from \"./PostThreads\";\r\nimport { Views } from \"./Views\";\r\n\r\n\r\n\r\n  /*\r\n  ButtonEvents class \r\n  EXPLANATION: ButtonEvents class is not instantiated on page load. It gets instantiated\r\n  after the inputdata (tableText, ipadress) are validated. This class\r\n  is responsible for setting up the eventlistners for the start,stop,update and\r\n  sendOnce buttons.\r\n  REMARKS: The startButtonInput, stopButtonInput,sendOnceButtoninput and stopButtonInput functionality could\r\n  be in theory be put in one method. Since alot of code is duplicated (postThreads.stop, postThreads.start). By\r\n  passing the needed functionality as arguments.\r\n    */\r\n\r\n\r\nexport class ButtonEvents {\r\n  private startButton = document.getElementById(\"startButton\");\r\n  private stopButton = document.getElementById(\"stopButton\");\r\n  private updateButton = document.getElementById(\"updateButton\");\r\n  private sendOnceButton = document.getElementById(\"sendOnceButton\");\r\n  private helpers = new Helpers();\r\n  private views = new Views();\r\n  private postThreads: PostThreads;\r\n  private tableDict: Array<{}>;\r\n\r\n  /*\r\n  constructor()\r\n  EXPLANATION: postThreads methods are used after the evenlistners are triggerd. tableDict\r\n  is used as argument in some postThreads methods\r\n  REMARKS: could set tableDict directly in PostThreads, however the PostThreads.sendOnce method\r\n  would need to be rewritten. See PostThreads.ts for more information\r\n    */\r\n  constructor(postThreads: PostThreads, tableDict: Array<{}>) {\r\n    this.postThreads = postThreads;\r\n    this.tableDict = tableDict;\r\n  }\r\n  /*\r\n  startListners()\r\n  EXPLANATION: launches the button event listners\r\n  REMARKS: none\r\n    */\r\n  public startListners(): void {\r\n    this.startButtonInput();\r\n    this.stopButtonInput();\r\n    this.updateButtonInput();\r\n    this.sendOnceButtonInput();\r\n  }\r\n  /*\r\n  startButtonInput()\r\n  EXPLANATION: stop the current running threads, before launching new threads.\r\n  REMARKS: none\r\n    */\r\n  private startButtonInput(): void {\r\n    this.startButton.addEventListener(\"click\", () => {\r\n      this.postThreads.stop();\r\n      this.postThreads.start( this.helpers.readRadioButtonStatus(), this.tableDict);\r\n      this.views.statusView(\"threads running\");\r\n    });\r\n  }\r\n  /*\r\nupdateButtonInput()\r\n  EXPLANATION: stops the current running threads, before launchin the newly updated threads\r\n  REMARKS: This function is exactly the same as startButtonInput, thus the redundant code \r\n  should be but in a seperate methods, which can be used by bot startButtonInput and updateButtoninput\r\n    */\r\n  private updateButtonInput():void {\r\n    this.updateButton.addEventListener(\"click\", () => {\r\n      this.postThreads.stop();\r\n      this.postThreads.start(this.helpers.readRadioButtonStatus(), this.tableDict);\r\n      this.views.statusView(\"threads running\");\r\n    });\r\n  }\r\n\r\n  /*\r\n  sendOnceButtonInput()\r\n  EXPLANATION: After event this function immediatly sends the first tableRowDict (tableDict[0]),\r\n  it is handy to have for immediate debugging to the target app.\r\n  REMARKS: this method could be replaced by only using the funciton sendOnce methods in PostThreads,\r\n  see PostThreads.ts for more information.\r\n    */\r\n  private sendOnceButtonInput():void {\r\n    this.sendOnceButton.addEventListener(\"click\", () => {\r\n      this.postThreads.stop();\r\n      this.views.statusView(\"Threads stopped\");\r\n      this.postThreads.sendOnce(this.tableDict[0]);\r\n    });\r\n  }\r\n  /*\r\n  sendOnceButtonInput()\r\n  EXPLANATION: After event stops the current threads\r\n  REMARKS:none\r\n    */\r\n  private stopButtonInput():void {\r\n    this.stopButton.addEventListener(\"click\", () => {\r\n      this.postThreads.stop();\r\n      this.views.statusView(\"Threads stopped\");\r\n    });\r\n  }\r\n}\r\n","import { LocalStorageData } from \"./LocalStorageData\";\r\nimport { PostThreads } from \"./PostThreads\";\r\nimport { Views } from \"./Views\";\r\nimport { Validation } from \"./Validation\";\r\nimport { Helpers } from \"./Helpers\";\r\nimport {ButtonEvents} from \"./ButtonEvents\"\r\n\r\n       /*\r\n  MainEvents class\r\n  EXPLANATION: This is the main class, from where the app is instantiated/runned/controlled. The app\r\n  as on app creation 3 main events that can occur.\r\n  1:onPageLoad(): To prevent the user for constantly uploading a tableText. OnPageLoad checks if a previous\r\n  tableText and ipAdress is in localSTorage. If this is case this data used, until the user changes the ipAdress and/or\r\n  uploads another tableText\r\n  2: ipAdressInputEvent(): If a user changes the ipAdress, the ipAdress is checked,saved and running threads stopped\r\n  3: fileUploadEvent(): If a user uploads a new cvs file, this file is checked,saved and running threads stopped.\r\n  REMARKS:  The code is getting spaghettified, in a larger app the classes should be changed to reflect components.\r\n\r\n    */\r\n\r\nexport class MainEvents {\r\n\r\n\r\n  public fileUploadInput = <HTMLInputElement>(\r\n    document.getElementById(\"fileUploadInput\")\r\n  );\r\n  public ipAdressInput = <HTMLInputElement>(\r\n    document.getElementById(\"ipAdressInput\")\r\n  );\r\n\r\n    // load all classes that are needed.\r\n  private localStorageData:LocalStorageData = new LocalStorageData(); // for checking,reading,writing to localStorage\r\n  private postThreads:PostThreads = new PostThreads(); // class that stops and starts the post request threads, or sends a single post request\r\n  private views:Views = new Views(); // class that creates views\r\n  private helpers:Helpers = new Helpers(); // class that contain tableText conversions to array and dict. And reads radioButton states\r\n  private validation:Validation = new Validation(); // class that validates the uploaded tableText and ipAdress input\r\n\r\n  private ipAdress:string = \"\";\r\n  private tableText:string = \"\";\r\n\r\n         /*\r\n  ipAdressInputEvent()\r\n  EXPLANATION: Creates an event listner for ipAdress input. And updated this.ipAdress\r\n  REMARKS:  none\r\n    */\r\n  private ipAdressInputEvent(): void {\r\n    this.ipAdressInput = <HTMLInputElement>(\r\n      document.getElementById(\"ipAdressInput\")\r\n    );\r\n\r\n    this.ipAdressInput.addEventListener(\"input\", (e) => {\r\n        this.ipAdress = this.ipAdressInput.value\r\n        this.ipAdressAndTextCheck();\r\n    });\r\n  }\r\n\r\n \r\n         /*\r\n  fileUploadEvent()\r\n  EXPLANATION: creates an event listner for file uploads. And reads the text of the file upload. And it\r\n  updates this.tableText\r\n  REMARKS:  none\r\n    */\r\n  private fileUploadEvent():void {\r\n    this.fileUploadInput.addEventListener(\"input\", () => {\r\n      let reader = new FileReader();\r\n\r\n      reader.addEventListener(\"load\", (e) => {\r\n        const tableTextIn = e.target.result.toString();\r\n        this.tableText = tableTextIn;\r\n   \r\n        this.ipAdressAndTextCheck();\r\n\r\n      });\r\n\r\n      reader.readAsBinaryString(this.fileUploadInput.files[0]);\r\n    });\r\n  }\r\n         /*\r\n  onPageLoad()\r\n  EXPLANATION: On each page load, on page load should be run. It checks localStorage for an\r\n  tableText and ipAdress. If an tableText and ipAdress exist their class variable this.tableTExt and \r\n  this.ipAdress are updated.\r\n  REMARKS:  none\r\n    */\r\n  private onPageLoad():void {\r\n\r\n    if (this.localStorageData.hasLocalData() == true) {\r\n      const localData= this.localStorageData.readLocalData();\r\n      this.tableText =  localData[0]\r\n      this.ipAdress = localData[1]\r\n      this.ipAdressInput.value = this.ipAdress\r\n      this.ipAdressAndTextCheck()\r\n    } \r\n  }\r\n         /*\r\n  ipAdressInputEvent()\r\n  EXPLANATION: After the 3 main events, this method is called. It validates tableText and ipAdress and\r\n  saves them to localStorage. Then is loads the views for tableDiv, statusDiv and buttonsDiv. Followed by\r\n  launching the event listners for the buttons. If validation fails it loads the view for errorDiv. \r\n  REMARKS:  none\r\n    */\r\n  private ipAdressAndTextCheck():void {\r\n    const ipAdressValidation = this.validation.validateIpAdress(this.ipAdress)\r\n    const tableTextValidation = this.validation.validateText(this.tableText)\r\n    this.views.clearNonStaticViews()\r\n\r\n    if(ipAdressValidation == true && tableTextValidation == true){\r\n  \r\n      this.localStorageData.writeLocalData(this.tableText,this.ipAdress)\r\n      this.postThreads.setIpAdress(this.ipAdress)\r\n      const tableDict = this.helpers.tableTextToDict(this.tableText)\r\n\r\n\r\n      this.views.tableView(tableDict)\r\n      this.views.statusView(\"Post threads not running\")\r\n      this.views.buttonsView()\r\n      const buttonEvents = new ButtonEvents(this.postThreads,tableDict)\r\n      buttonEvents.startListners()\r\n    }else{\r\n      this.views.errorsView(this.validation.validationErrors);\r\n\r\n\r\n    }\r\n\r\n}\r\n         /*\r\n  runEvents()\r\n  EXPLANATION: Launching the 3 main events. \r\n  REMARKS:  none\r\n    */\r\n  public runEvents() {\r\n    this.onPageLoad()\r\n    this.fileUploadEvent();\r\n    this.ipAdressInputEvent();\r\n  }\r\n}\r\n","import {MainEvents} from \"./classes/MainEvents\"\r\n\r\n\r\nlet mainEvents = new MainEvents()\r\nmainEvents.runEvents()\r\n\r\n\r\n\r\n\r\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}